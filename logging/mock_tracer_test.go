// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lucas-clemente/quic-go/logging (interfaces: Tracer)

// Package logging is a generated GoMock package.
package logging

import (
	gomock "github.com/golang/mock/gomock"
	protocol "github.com/lucas-clemente/quic-go/internal/protocol"
	reflect "reflect"
)

// MockTracer is a mock of Tracer interface
type MockTracer struct {
	ctrl     *gomock.Controller
	recorder *MockTracerMockRecorder
}

// MockTracerMockRecorder is the mock recorder for MockTracer
type MockTracerMockRecorder struct {
	mock *MockTracer
}

// NewMockTracer creates a new mock instance
func NewMockTracer(ctrl *gomock.Controller) *MockTracer {
	mock := &MockTracer{ctrl: ctrl}
	mock.recorder = &MockTracerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTracer) EXPECT() *MockTracerMockRecorder {
	return m.recorder
}

// TracerForClient mocks base method
func (m *MockTracer) TracerForClient(arg0 protocol.ConnectionID) ConnectionTracer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TracerForClient", arg0)
	ret0, _ := ret[0].(ConnectionTracer)
	return ret0
}

// TracerForClient indicates an expected call of TracerForClient
func (mr *MockTracerMockRecorder) TracerForClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TracerForClient", reflect.TypeOf((*MockTracer)(nil).TracerForClient), arg0)
}

// TracerForServer mocks base method
func (m *MockTracer) TracerForServer(arg0 protocol.ConnectionID) ConnectionTracer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TracerForServer", arg0)
	ret0, _ := ret[0].(ConnectionTracer)
	return ret0
}

// TracerForServer indicates an expected call of TracerForServer
func (mr *MockTracerMockRecorder) TracerForServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TracerForServer", reflect.TypeOf((*MockTracer)(nil).TracerForServer), arg0)
}
